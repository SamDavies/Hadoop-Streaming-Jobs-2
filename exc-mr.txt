Task 1 code begin
# mapper1.py
#!/usr/bin/python
import os
import sys

for line in sys.stdin:
    file_name = os.path.basename(os.environ["mapreduce_map_input_file"])
    file_name = file_name.strip()

    line = line.strip()
    words = line.split()

    for word in words:
        print("{0}\t{1}\t{2}".format(word.replace(":", ""), file_name, 1))

# reducer1.py
#!/usr/bin/python

import sys

word = ''
prev_word = ''
doc_count = 1

file_name = ''
prev_doc = ''
word_count = 0

for line in sys.stdin:
    line = line.strip()
    word, file_name, count = line.split("\t", 2)

    # refresh for new word
    if prev_word != word:
        # ignore the first line
        if prev_word:
            # write the doc count and the previous doc
            sys.stdout.write("({0},{1})".format(prev_doc, word_count))
            sys.stdout.write("}:" + str(doc_count))
            print("")
            doc_count = 1
            word_count = 0
            prev_doc = file_name

            # write the new word
            sys.stdout.write(str(word) + ":{")
        else:
            # print the name for line 1
            sys.stdout.write(str(word) + ":{")
    else:
        # refresh for new doc
        if prev_doc != file_name:
            sys.stdout.write("({0},{1}),".format(prev_doc, word_count))
            doc_count += 1
            word_count = 0

    # update previous variables
    prev_word = word
    prev_doc = file_name
    word_count += 1

if file_name == prev_doc:
    sys.stdout.write("({0},{1})".format(prev_doc, word_count))

if prev_word == word:
    sys.stdout.write("}:" + str(doc_count))
    print("")

# reducer2.py
#!/usr/bin/python

import sys

for line in sys.stdin:
    line = line.strip()
    word, word_counts, doc_count = line.split(":", 2)
    print("{0}:{1}:{2}".format(word, doc_count, word_counts))

hadoop jar /opt/hadoop/hadoop-2.7.1/share/hadoop/tools/lib/hadoop-streaming-2.7.1.jar  -D stream.num.map.output.key.fields=2  -D num.key.fields.for.partition=1  -D mapreduce.partition.keypartitioner.options="-k1,1"  -D mapreduce.partition.keycomparator.options="-k1,2"  -input /data/assignments/ex2/task1/large/  -output /user/$USER/data/Assignment2/task1/output/job1  -mapper mapper1.py  -reducer reducer1.py  -partitioner org.apache.hadoop.mapred.lib.KeyFieldBasedPartitioner  -file Documents/EXC/Assignment2/task1/input/mapper1.py  -file Documents/EXC/Assignment2/task1/input/reducer1.py  -jobconf mapred.job.name="Sam's inverted index part 1" ;
hadoop jar /opt/hadoop/hadoop-2.7.1/share/hadoop/tools/lib/hadoop-streaming-2.7.1.jar  -D mapreduce.job.reduces=1  -input /user/$USER/data/Assignment2/task1/output/job1  -output /user/$USER/data/Assignment2/task1/output/job2  -mapper cat  -reducer reducer2.py  -file Documents/EXC/Assignment2/task1/input/reducer2.py  -jobconf mapred.job.name="Sam's inverted index part 2" ;
Task 1 code end

Task 1 results begin
"'A:1:{(d15.txt,3)}
"'Abimelech:1:{(d1.txt,1)}
"'After:1:{(d15.txt,1)}
"'Ah!':1:{(d15.txt,1)}
"'Ah!:1:{(d15.txt,1)}
"'Ah,':1:{(d15.txt,1)}
"'Ah,:1:{(d15.txt,2)}
"'Alright,':1:{(d2.txt,1)}
"'And:1:{(d15.txt,3)}
"'Ara:1:{(d8.txt,1)}
Task 1 results end

Task 2 code begin
# mapper1.py
#!/usr/bin/python
import sys

import math

search_doc = 'd1.txt'
total_docs = 17.0

# First load the dictionary.
terms = set()
for line in file('terms.txt'):
    terms.add(line.strip())


def get_search_doc_word_count(raw, doc_count):
    """
    Extract the word count for the serach document
    :param raw: the raw string to parse
    :param doc_count: the number of documents which the word occurs in
    :return: the count of the word occurrences in the search document, 0 if not fount
    """
    for i in range(int(doc_count)):
        doc, word_count = raw.partition('(')[-1].partition(')')[0].split(',', 1)
        if doc == search_doc:
            return word_count
    return 0


def calculate_tf_idf(term, freq, docs_occur):
    """
    Calculates the term frequency-inverse document frequency
    :param term: the word
    :param freq: the number of occurrences of the term inside the search document
    :param docs_occur: the number of documents where the term appears
    :return: the term frequency-inverse document frequency
    """
    return float(freq) * math.log(total_docs/(1.0 + float(docs_occur)), 10)

for line in sys.stdin:
    line = line.strip()
    word, doc_count, word_counts_raw = line.split(":", 2)

    if word in terms:
        search_doc_word_count = get_search_doc_word_count(word_counts_raw, doc_count)
        score = calculate_tf_idf(word, search_doc_word_count, doc_count)
        print("{0}\t{1}\t{2}".format(word, score, search_doc))
        terms.remove(word)


# print all the missing terms
for term in terms:
    print("{0}\t{1}\t{2}".format(term, 0.0, search_doc))

# reducer1.py
#!/usr/bin/python

import sys

word = ''
score = ''
doc = ''

prev_word = ''
prev_score = ''

for line in sys.stdin:
    line = line.strip()
    word, score, doc = line.split("\t", 2)

    # refresh for new word
    if prev_word != word:
        # ignore the first line
        if prev_word:
            print("{0}, {1} = {2}".format(prev_word, doc, prev_score))
    prev_word = word
    prev_score = score


if prev_word == word:
    print("{0}, {1} = {2}".format(word, doc, score))

hadoop jar /opt/hadoop/hadoop-2.7.1/share/hadoop/tools/lib/hadoop-streaming-2.7.1.jar  -D stream.num.map.output.key.fields=2  -D num.key.fields.for.partition=1  -D mapreduce.partition.keypartitioner.options="-n1,1"  -D mapreduce.partition.keycomparator.options="-n1,2"  -D mapreduce.job.reduces=2  -input /user/$USER/data/Assignment2/task1/output/job2  -output /user/$USER/data/Assignment2/task2/output/  -mapper mapper1.py  -reducer reducer1.py  -partitioner org.apache.hadoop.mapred.lib.KeyFieldBasedPartitioner  -file Documents/EXC/Assignment2/task2/terms.txt  -file Documents/EXC/Assignment2/task2/input/mapper1.py  -file Documents/EXC/Assignment2/task2/input/reducer1.py  -jobconf mapred.job.name="Sam's tf-idf" ;
Task 2 code end

Task 2 results begin
agreement, d1.txt = 0.531478917042
child, d1.txt = 6.524311868
electronic, d1.txt = 0.0
family, d1.txt = 1.14151090877
Lassiter, d1.txt = 0.0
horse, d1.txt = 2.57155048062
monument, d1.txt = 0.62838893005
Task 2 results end

Task 3.1 code begin
# mapper1.py
#!/usr/bin/python
import sys

# format of request
# msfcsma3.msfc.nasa.gov - - [01/Aug/1995:13:24:29 -0400] "GET /shuttle/missions/missions.html HTTP/1.0" 200 8677


for line in sys.stdin:
    line = line.strip()
    # extract and separate the request
    strings = line.partition('"')[-1].partition('"')[0].strip().split()

    if len(strings) > 2:
        print("{0}\t1".format(strings[1]))

# mapper2.py
#!/usr/bin/python
import sys

# format of request
# msfcsma3.msfc.nasa.gov - - [01/Aug/1995:13:24:29 -0400] "GET /shuttle/missions/missions.html HTTP/1.0" 200 8677


for line in sys.stdin:
    line = line.strip()
    # extract and separate the request
    host, count = line.split('\t', 2)
    print("{0}\t{1}".format(count, host))

# reducer1.py
#!/usr/bin/python

import sys

prev_word = ""
word = ""
current_count = 0

max_count = 0
max_word = ''


for line in sys.stdin:
    line = line.strip()
    word, _ = line.split("\t", 2)

    # refresh for new word
    if prev_word != word:
        if current_count > max_count:
            max_word = prev_word
            max_count = current_count
        current_count = 0

    prev_word = word
    current_count += 1

# check last word
if prev_word == word:
    if current_count > max_count:
        max_word = word
        max_count = current_count

print("{0}\t{1}".format(max_word, max_count))

# reducer2.py
#!/usr/bin/python

import sys

num = 0

for line in sys.stdin:
    line = line.strip()
    count, word = line.split("\t", 2)

    if num < 1:
        print("{0}\t{1}".format(word, count))
        num += 1

hadoop jar /opt/hadoop/hadoop-2.7.1/share/hadoop/tools/lib/hadoop-streaming-2.7.1.jar  -input /data/assignments/ex2/task2/logsLarge.txt  -output /user/$USER/data/Assignment2/task3/output/job1/  -mapper mapper1.py  -reducer reducer1.py  -file Documents/EXC/Assignment2/task3/input/mapper1.py  -file Documents/EXC/Assignment2/task3/input/reducer1.py  -jobconf mapred.job.name="Sam's most requested url part 1" ;
hadoop jar /opt/hadoop/hadoop-2.7.1/share/hadoop/tools/lib/hadoop-streaming-2.7.1.jar  -D mapred.output.key.comparator.class=org.apache.hadoop.mapred.lib.KeyFieldBasedComparator  -D mapred.text.key.comparator.options=-nr  -D mapreduce.job.reduces=1  -input /user/$USER/data/Assignment2/task3/output/job1/  -output /user/$USER/data/Assignment2/task3/output/job2/  -mapper mapper2.py  -reducer reducer2.py  -file Documents/EXC/Assignment2/task3/input/mapper2.py  -file Documents/EXC/Assignment2/task3/input/reducer2.py  -jobconf mapred.job.name="Sam's most requested url part 2" ;
Task 3.1 code end

Task 3.1 results begin
/images/NASA-logosmall.gif	97293
Task 3.1 results end

Task 3.2 code begin
# mapper1.py
#!/usr/bin/python
import sys

# format of request
# msfcsma3.msfc.nasa.gov - - [01/Aug/1995:13:24:29 -0400] "GET /shuttle/missions/missions.html HTTP/1.0" 200 8677


for line in sys.stdin:
    line = line.strip()
    # extract and separate the request
    strings = line.split()

    if strings[-2] == "404":
        print("{0}\t1".format(strings[0]))

# mapper2.py
#!/usr/bin/python
import sys

# format of request
# msfcsma3.msfc.nasa.gov - - [01/Aug/1995:13:24:29 -0400] "GET /shuttle/missions/missions.html HTTP/1.0" 200 8677


for line in sys.stdin:
    line = line.strip()
    # extract and separate the request
    host, count = line.split('\t', 2)
    print("{0}\t{1}".format(count, host))

# reducer1.py
#!/usr/bin/python

import sys

prev_word = ""
word = ""
current_count = 0


for line in sys.stdin:
    line = line.strip()
    word, _ = line.split("\t", 2)

    # refresh for new word
    if prev_word != word:
        if prev_word:
            print("{0}\t{1}".format(prev_word, current_count))
            current_count = 0

    prev_word = word
    current_count += 1

print("{0}\t{1}".format(word, current_count))

# reducer2.py
#!/usr/bin/python

import sys

num = 0

for line in sys.stdin:
    line = line.strip()
    count, word = line.split("\t", 2)

    if num < 10:
        print("{0}\t{1}".format(word, count))
        num += 1

hadoop jar /opt/hadoop/hadoop-2.7.1/share/hadoop/tools/lib/hadoop-streaming-2.7.1.jar  -input /data/assignments/ex2/task2/logsLarge.txt  -output /user/$USER/data/Assignment2/task4/output/job1/  -mapper mapper1.py  -reducer reducer1.py  -file Documents/EXC/Assignment2/task4/input/mapper1.py  -file Documents/EXC/Assignment2/task4/input/reducer1.py  -jobconf mapred.job.name="Sam's top 10 404s part 1" ;
hadoop jar /opt/hadoop/hadoop-2.7.1/share/hadoop/tools/lib/hadoop-streaming-2.7.1.jar  -D mapred.output.key.comparator.class=org.apache.hadoop.mapred.lib.KeyFieldBasedComparator  -D mapred.text.key.comparator.options=-nr  -input /user/$USER/data/Assignment2/task4/output/job1/  -output /user/$USER/data/Assignment2/task4/output/job2/  -mapper mapper2.py  -reducer reducer2.py  -file Documents/EXC/Assignment2/task4/input/mapper2.py  -file Documents/EXC/Assignment2/task4/input/reducer2.py  -jobconf mapred.job.name="Sam's top 10 404s part 2" ;
hadoop jar /opt/hadoop/hadoop-2.7.1/share/hadoop/tools/lib/hadoop-streaming-2.7.1.jar  -D mapred.output.key.comparator.class=org.apache.hadoop.mapred.lib.KeyFieldBasedComparator  -D mapred.text.key.comparator.options=-nr  -D mapreduce.job.reduces=1  -input /user/$USER/data/Assignment2/task4/output/job2/  -output /user/$USER/data/Assignment2/task4/output/job3/  -mapper mapper2.py  -reducer reducer2.py  -file Documents/EXC/Assignment2/task4/input/mapper2.py  -file Documents/EXC/Assignment2/task4/input/reducer2.py  -jobconf mapred.job.name="Sam's top 10 404s part 3" ;
Task 3.2 code end

Task 3.2 results begin
dialip-217.den.mmc.com	62
piweba3y.prodigy.com	47
155.148.25.4	44
maz3.maz.net	39
gate.barr.com	38
ts8-1.westwood.ts.ucla.edu	37
nexus.mlckew.edu.au	37
204.62.245.32	37
m38-370-9.mit.edu	37
scooter.pa-x.dec.com	35
Task 3.2 results end

Task 3.3 code begin
# mapper1.py
#!/usr/bin/python
import sys
import time
import datetime

# format of request
# msfcsma3.msfc.nasa.gov - - [01/Aug/1995:13:24:29 -0400] "GET /shuttle/missions/missions.html HTTP/1.0" 200 8677


for line in sys.stdin:
    line = line.strip()
    # extract and separate the request
    host = line.split()[0]
    datetime_raw = line.partition('[')[-1].partition(']')[0]
    timestamp = time.mktime(datetime.datetime.strptime(datetime_raw, "%d/%b/%Y:%H:%M:%S -0400").timetuple())
    print("{0}\t{1}\t{2}".format(host, timestamp, 1))

# reducer1.py
#!/usr/bin/python

import sys
import datetime

first_timestamp = ''
timestamp_raw = ''
request_count = 0

prev_host = ""
prev_timestamp_raw = ""
host = ""


def print_host_time_diff(host_name, num_requests, last, first):
    """
    Calculate the time diff and print to stdout
    :param host_name: the name of the host
    :param num_requests: the number of requests from this host
    :param last: the last timestamp from this host
    :param first: the last timestamp from this host
    :return: nothing
    """
    last = datetime.datetime.fromtimestamp(float(last))
    if num_requests > 1:
        # calclate the time difference between the first and last request from this host
        first = datetime.datetime.fromtimestamp(float(first))
        time_diff = last - first
        print("{0}\t{1}".format(host_name, time_diff))
    else:
        # for 1 request just print the timestamp
        print("{0}\t{1}".format(host_name, last))

for line in sys.stdin:
    line = line.strip()
    host, timestamp_raw, _ = line.split("\t", 3)

    # refresh for new host
    if prev_host != host:
        if prev_host:
            # check if more than 1 request was made
            print_host_time_diff(prev_host, request_count, prev_timestamp_raw, first_timestamp)

        first_timestamp = timestamp_raw
        request_count = 0

    prev_host = host
    prev_timestamp_raw = timestamp_raw
    request_count += 1

print_host_time_diff(host, request_count, timestamp_raw, first_timestamp)

hadoop jar /opt/hadoop/hadoop-2.7.1/share/hadoop/tools/lib/hadoop-streaming-2.7.1.jar  -D stream.num.map.output.key.fields=2  -D num.key.fields.for.partition=1  -D mapreduce.partition.keypartitioner.options="-k1,1"  -D mapreduce.partition.keycomparator.options="-k1,2"  -D mapred.output.key.comparator.class=org.apache.hadoop.mapred.lib.KeyFieldBasedComparator  -D mapred.text.key.comparator.options=-nr  -input /data/assignments/ex2/task2/logsLarge.txt  -output /user/$USER/data/Assignment2/task5/output/  -mapper mapper1.py  -reducer reducer1.py  -partitioner org.apache.hadoop.mapred.lib.KeyFieldBasedPartitioner  -file Documents/EXC/Assignment2/task5/input/mapper1.py  -file Documents/EXC/Assignment2/task5/input/reducer1.py  -jobconf mapred.job.name="Sam's time diff" ;
Task 3.3 code end

Task 3.3 results begin
02-17-05.comsvc.calpoly.edu	0:03:02
1.ts2.mnet.medstroms.se	11 days, 22:46:27
101.irri.cgiar.org	0:00:45
12-102md.acs.calpoly.edu	0:18:32
12-105da.acs.calpoly.edu	0:13:19
12.ts1.mnet.medstroms.se	1995-08-09 04:37:50
121.27.inmarsat.org	0:00:12
128.100.83.132	0:00:02
128.100.87.74	0:00:42
128.100.95.2	1995-08-13 13:59:50
Task 3.3 results end

Task 4.1 code begin
# mapper1.py
#!/usr/bin/python
import re
import sys

# format of request
# msfcsma3.msfc.nasa.gov - - [01/Aug/1995:13:24:29 -0400] "GET /shuttle/missions/missions.html HTTP/1.0" 200 8677


for line in sys.stdin:
    line = line.strip()
    # extract and separate the request
    line = line[4:][:-2].strip()
    # get the raw data as a list of strings
    data_raw = re.findall(r'\S+"\S+"', line)
    # get the attribute and values from the raw string

    data = dict()
    for pair in data_raw:
        pair = pair.split("=")
        if len(pair) > 1:
            value = pair[1][1:][:-1]
            data[pair[0]] = value

    # do the query
    if data.get("PostTypeId") == '1':
        post_id = data.get("Id")
        view_count = data.get("ViewCount")
        print("{0}\t{1}".format(view_count, post_id))

# reducer1.py
#!/usr/bin/python

import sys

num = 0

for line in sys.stdin:
    line = line.strip()
    count, post_id = line.split("\t", 2)

    if num < 10:
        print("{0}\t{1}".format(count, post_id))
        num += 1

# reducer2.py
#!/usr/bin/python

import sys

num = 0

for line in sys.stdin:
    line = line.strip()
    count, post_id = line.split("\t", 2)

    if num < 10:
        print("{0},\t{1}".format(post_id, count))
        num += 1

hadoop jar /opt/hadoop/hadoop-2.7.1/share/hadoop/tools/lib/hadoop-streaming-2.7.1.jar  -D mapred.output.key.comparator.class=org.apache.hadoop.mapred.lib.KeyFieldBasedComparator  -D mapred.text.key.comparator.options=-nr  -input /data/assignments/ex2/task3/stackLarge.txt  -output /user/$USER/data/Assignment2/task6/output/job1/  -mapper mapper1.py  -reducer reducer1.py  -file Documents/EXC/Assignment2/task6/input/mapper1.py  -file Documents/EXC/Assignment2/task6/input/reducer1.py  -jobconf mapred.job.name="Sam's stack overflow most viewed part 1" ;
hadoop jar /opt/hadoop/hadoop-2.7.1/share/hadoop/tools/lib/hadoop-streaming-2.7.1.jar  -D mapred.output.key.comparator.class=org.apache.hadoop.mapred.lib.KeyFieldBasedComparator  -D mapred.text.key.comparator.options=-nr  -D mapreduce.job.reduces=1  -input /user/$USER/data/Assignment2/task6/output/job1/  -output /user/$USER/data/Assignment2/task6/output/job2/  -mapper cat  -reducer reducer2.py  -file Documents/EXC/Assignment2/task6/input/reducer2.py  -jobconf mapred.job.name="Sam's stack overflow most viewed part 2" ;
Task 4.1 code end

Task 4.1 results begin
184618,	1782717
503093,	1240007
25969,	1075873
194812,	1058604
426258,	989328
363681,	978463
114543,	962440
134845,	938463
306583,	913899
63447,	868645
Task 4.1 results end

Task 4.2 code begin
# mapper1.py
#!/usr/bin/python
import re
import sys

# format of request
# msfcsma3.msfc.nasa.gov - - [01/Aug/1995:13:24:29 -0400] "GET /shuttle/missions/missions.html HTTP/1.0" 200 8677


for line in sys.stdin:
    line = line.strip()
    # extract and separate the request
    line = line[4:][:-2].strip()
    # get the raw data as a list of strings
    data_raw = re.findall(r'\S+"\S+"', line)
    # get the attribute and values from the raw string

    data = dict()
    for pair in data_raw:
        pair = pair.split("=")
        if len(pair) > 1:
            value = pair[1][1:][:-1]
            data[pair[0]] = value

    # do the query
    if data.get("PostTypeId") == '2':
        post_id = data.get("ParentId")
        user_id = data.get("OwnerUserId")
        if post_id:
            if user_id:
                print("{0}\t{1}\t1".format(user_id, post_id))

# reducer1.py
#!/usr/bin/python

import sys

prev_user = ''
prev_post = ''
post_count = 0
current_post_list = ''

user_id = ''
post_id = ''

max_post_count = 0
max_user = ''
max_post_list = ''

for line in sys.stdin:
    line = line.strip()
    user_id, post_id, _ = line.split("\t", 3)

    if prev_user != user_id:
        if prev_user:
            if post_count > max_post_count:
                max_post_count = post_count
                max_user = prev_user
                max_post_list = current_post_list
        post_count = 0
        prev_post = ''
        current_post_list = ''

    if prev_post != post_id:
        # append the previous post id to the list for this user
        if post_count != 0:
            current_post_list += ', '
        current_post_list += post_id
        post_count += 1

    prev_user = user_id
    prev_post = post_id

if prev_user == user_id:
    if post_count > max_post_count:
        max_post_count = post_count
        max_user = user_id
        max_post_list = current_post_list

print("{0}\t{1}\t{2}".format(max_post_count, max_user, max_post_list))

# reducer2.py
#!/usr/bin/python

import sys

num = 0

for line in sys.stdin:
    line = line.strip()
    count, user_id, posts = line.split("\t", 3)

    if num < 1:
        print("{0}\t->\t{1}".format(user_id, posts))
        num += 1

hdfs dfs -rm -r /user/$USER/data/Assignment2/task7/output/job1/ ;
hadoop jar /opt/hadoop/hadoop-2.7.1/share/hadoop/tools/lib/hadoop-streaming-2.7.1.jar  -D stream.num.map.output.key.fields=2  -D num.key.fields.for.partition=1  -D mapreduce.partition.keypartitioner.options="-k1,1"  -D mapreduce.partition.keycomparator.options="-k1,2"  -D mapred.output.key.comparator.class=org.apache.hadoop.mapred.lib.KeyFieldBasedComparator  -D mapred.text.key.comparator.options=-nr  -input /data/assignments/ex2/task3/stackLarge.txt  -output /user/$USER/data/Assignment2/task7/output/job1/  -mapper mapper1.py  -reducer reducer1.py  -partitioner org.apache.hadoop.mapred.lib.KeyFieldBasedPartitioner  -file Documents/EXC/Assignment2/task7/input/mapper1.py  -file Documents/EXC/Assignment2/task7/input/reducer1.py  -jobconf mapred.job.name="Sam's stack overflow most answered part 1" ;
hadoop jar /opt/hadoop/hadoop-2.7.1/share/hadoop/tools/lib/hadoop-streaming-2.7.1.jar  -D mapred.output.key.comparator.class=org.apache.hadoop.mapred.lib.KeyFieldBasedComparator  -D mapred.text.key.comparator.options=-nr  -D mapreduce.job.reduces=1  -input /user/$USER/data/Assignment2/task7/output/job1/  -output /user/$USER/data/Assignment2/task7/output/job2/  -mapper cat  -reducer reducer2.py  -file Documents/EXC/Assignment2/task7/input/reducer2.py  -jobconf mapred.job.name="Sam's stack overflow most answered part 3" ;
Task 4.2 code end

Task 4.2 results begin
22656	->	131871, 137448, 137454, 137688, 139260, 139592, 139837, 141423, 141467, 142003, 143947, 143997, 144176, 144516, 144783, 145371, 145509, 145856, 146155, 146204, 146358, 148074, 148078, 148298, 148882, 149211, 149233, 151936, 152313, 152613, 152900, 153048, 153573, 154112, 154463, 154483, 154489, 154551, 154680, 155209, 155260, 155378, 155458, 155780, 156369, 156430, 156815, 157055, 157198, 157219, 157254, 157354, 157557, 159705, 161184, 161231, 161432, 161477, 161556, 161633, 161822, 161942, 162007, 162112, 162303, 162335, 162571, 162696, 162727, 162879, 163183, 164144, 164192, 164369, 164425, 164468, 164643, 168150, 168169, 168393, 169220, 169378, 171332, 171664, 171717, 173080, 173272, 174155, 174498, 174585, 174662, 176106, 176196, 176264, 176267, 177363, 177373, 177506, 177538, 177835, 177836, 178026, 178188, 178255, 178333, 178516, 178888, 178976, 179337, 181427, 181643, 182440, 182600, 182683, 182749, 183033, 183250, 183315, 183367, 183473, 183479, 183685, 183856, 185072, 185124, 185690, 185987, 186007, 186082, 186115, 186385, 186467, 186523, 186527, 186600, 186643, 186653, 186891, 186964, 187068, 187289, 187414, 187576, 187602, 187633, 187695, 187742, 187983, 187989, 188120, 188134, 188141, 188184, 188510, 188688, 188693, 188769, 188864, 188977, 190227, 190299, 190376, 190936, 191151, 191153, 191333, 192121, 192599, 193731, 193873, 194165, 194304, 194436, 194450, 194464, 194496, 194528, 194676, 195606, 196094, 196936, 197005, 197174, 197182, 197241, 197297, 197302, 197482, 198079, 198419, 198543, 200079, 200151, 200239, 200319, 200574, 200689, 200691, 200755, 200785, 201255, 201440, 201479, 201607, 201616, 201930, 201933, 202271, 203695, 203863, 204139, 204208, 204343, 204468, 204505, 204564, 204627, 204739, 204970, 205099, 205138, 205411, 205458, 205568, 206198, 206512, 206532, 206539, 207521, 207592, 207662, 207829, 207867, 207888, 207889, 207896, 208056, 208119, 208124, 208184, 208193, 208263, 208325, 208381, 208532, 208753, 208835, 208876, 208969, 209281, 209304, 209354, 209389, 209415, 210020, 210079, 210123, 210353, 211143, 211448, 211477, 211567, 211958, 212028, 212089, 212124, 212263, 212401, 212429, 212614, 212902, 213045, 213333, 213480, 213637, 213638, 213985, 214017, 214136, 214584, 214688, 214809, 214814, 215144, 215213, 215421, 215458, 216008, 217645, 217678, 217707, 217805, 217980, 218025, 218322, 218461, 218744, 218781, 218888, 219519, 219604, 219618, 219815, 219851, 220887, 221001, 221037, 221154, 221287, 221378, 221687, 221691, 221804, 221824, 221925, 222015, 222182, 222245, 222457, 222511, 222601, 222790, 222819, 223249, 223549, 223679, 224537, 225073, 225194, 225233, 225686, 225717, 225953, 225985, 226664, 226967, 227083, 227485, 227486, 227575, 227731, 227820, 228796, 228945, 228987, 229015, 229076, 229211, 229254, 229346, 229508, 229554, 229656, 229797, 229844, 229886, 230454, 230869, 231159, 231480, 231525, 231741, 231767, 232535, 232545, 232558, 232732, 232748, 232781, 232863, 233013, 233081, 233123, 233207, 233216, 233243, 233288, 233382, 233475, 233579, 233711, 233850, 233905, 234008, 234059, 234239, 234341, 234379, 234591, 234990, 234994, 235003, 235025, 235250, 235446, 235455, 236676, 236861, 236878, 237041, 237159, 237377, 238413, 238490, 238547, 238555, 238583, 238606, 238660, 238675, 239202, 239306, 239645, 239865, 239888, 239905, 240047, 240090, 240122, 240219, 240258, 240638, 240836, 240837, 240863, 241134, 241148, 241238, 241336, 241405, 241470, 241537, 242225, 242264, 242393, 242400, 242438, 242517, 242577, 242614, 242695, 242718, 242745, 242904, 242930, 243045, 243379, 243811, 244135, 244192, 244772, 244811, 244826, 244881, 244949, 245058, 245607, 246038, 246096, 246108, 246112, 246270, 246389, 246495, 246498, 246572, 247241, 247455, 247621, 251868, 251937, 251946, 251987, 252014, 252257, 252751, 252775, 252793, 252817, 252893, 253058, 253211, 253226, 253399, 253460, 253468, 253492, 253549, 253664, 253673, 253757, 253780, 253937, 253993, 254009, 254037, 254096, 254099, 254260, 254273, 254784, 255063, 255098, 255341, 255553, 255644, 255645, 255797, 255813, 255976, 256065, 256077, 256566, 257045, 257052, 257251, 257331, 257462, 257519, 258120, 258204, 258285, 258339, 258486, 258567, 258691, 258988, 259676, 259726, 259751, 259887, 259900, 259929, 261028, 261062, 261086, 261126, 261177, 261387, 261428, 261809, 262089, 262096, 262110, 262367, 262469, 262480, 262547, 262618, 262887, 263023, 263151, 263191, 263347, 263400, 263614, 264196, 264496, 264575, 264617, 264718, 264984, 265097, 265106, 265147, 265208, 265370, 265585, 265639, 265849, 265919, 266115, 266292, 266308, 266716, 266776, 266818, 266825, 266901, 266923, 267059, 267076, 267765, 267830, 268013, 268018, 268251, 268321, 268393, 268513, 268530, 268652, 268671, 269058, 269303, 269310, 269578, 269594, 269613, 269669, 269988, 270091, 270093, 270148, 270187, 270268, 270630, 270747, 270771, 271347, 271384, 271398, 271404, 271440, 271490, 271520, 271530, 271561, 271613, 271615, 271710, 271767, 272013, 272153, 272368, 272814, 272949, 273301, 273949, 274172, 274585, 275073, 275944, 276203, 276253, 276319, 276383, 276472, 277018, 277210, 277211, 277260, 277309, 277319, 277351, 277710, 277732, 277783, 277814, 277857, 277869, 278039, 278075, 278362, 278488, 278649, 278703, 279374, 280114, 280127, 280172, 280270, 280426, 280439, 280634, 280755, 280896, 280980, 281036, 281210, 281276, 281325, 281933, 281970, 282028, 282037, 282086, 282099, 282317, 282468, 283143, 283241, 283374, 283476, 283487, 283492, 283511, 283513, 283669, 283679, 283749, 283763, 284063, 284093, 284336, 284678, 284896, 285087, 285177, 285238, 285292, 285523, 285793, 285846, 286399, 286481, 286508, 286533, 286605, 286632, 287037, 287142, 287178, 287195, 287551, 287592, 287598, 287646, 287663, 287684, 287899, 288061, 288794, 288808, 289307, 289452, 289496, 289770, 289845, 290061, 290189, 290227, 290238, 290304, 290527, 290602, 290645, 290819, 291080, 291286, 291340, 291387, 291413, 291415, 291828, 292265, 292536, 292676, 292988, 293007, 293114, 293254, 293256, 293814, 293882, 293900, 293905, 293916, 294138, 294171, 294216, 294553, 295005, 295017, 295110, 295128, 295161, 295224, 295287, 295387, 295402, 295579, 295593, 295626, 295670, 295731, 295736, 295749, 296650, 296755, 296783, 296978, 297471, 298139, 298277, 298289, 298305, 298458, 298503, 298972, 298976, 299117, 299129, 299135, 299439, 299475, 299515, 299703, 299950, 299987, 300055, 300376, 300402, 300489, 300499, 301354, 301365, 301393, 301510, 301618, 301809, 301960, 301965, 302032, 302037, 302096, 302157, 302303, 302371, 302476, 303502, 304389, 304483, 304488, 304640, 304770, 304782, 304816, 304859, 304967, 305140, 305154, 305244, 305358, 305393, 305519, 305651, 305755, 305911, 306085, 306212, 307984, 308061, 308427, 308683, 308954, 308986, 309071, 309161, 309286, 309496, 309553, 309631, 309706, 309734, 309939, 311363, 311710, 312103, 312184, 312471, 313036, 313062, 313111, 313127, 313584, 313729, 313753, 313910, 314008, 314033, 314100, 314108, 314203, 314779, 315139, 315146, 315358, 316532, 316548, 316582, 316656, 316674, 316727, 316855, 316911, 317026, 317047, 317084, 317134, 317335, 317462, 317606, 317619, 317788, 317816, 317825, 318775, 319789, 319864, 320396, 320542, 320767, 320814, 321096, 321418, 321423, 321549, 321566, 323032, 323079, 323212, 323230, 323235, 324053, 324066, 324341, 324604, 324656, 324670, 324727, 325156, 325267, 325511, 325524, 325561, 325725, 326098, 326223, 326390, 326648, 326757, 326820, 327286, 327332, 327460, 327916, 329029, 329129, 329203, 330155, 330318, 330502, 330622, 330963, 331217, 333151, 333242, 333280, 333364, 333655, 333736, 333737, 333829, 333953, 334179, 334415, 334579, 334658, 334779, 334838, 335450, 335517, 335807, 336387, 336414, 336649, 336755, 336775, 336781, 336831, 336884, 337029, 337038, 337121, 337144, 337165, 337239, 337254, 337334, 337702, 337744, 337903, 337925, 338024, 338262, 338712, 338895, 339699, 339747, 339755, 339792, 339862, 339912, 339952, 340090, 340128, 340298, 340507, 340525, 340546, 341029, 341847, 341848, 341949, 341957, 341971, 342080, 342106, 342151, 342268, 342270, 343100, 343358, 343366, 343457, 343466, 343491, 343675, 343684, 343852, 343869, 343968, 344034, 344327, 344363, 344380, 344503, 344630, 345562, 346211, 346313, 346365, 346721, 346722, 346762, 347156, 347235, 347242, 348037, 348120, 348122, 348175, 348964, 349192, 349251, 349256, 349280, 349369, 349410, 349442, 349460, 349724, 349742, 349904, 350120, 350240, 350991, 352089, 352117, 352177, 352234, 352266, 352415, 352433, 352471, 352472, 352592, 352618, 353028, 353131, 353224, 353342, 353491, 355282, 355340, 355620, 355787, 355875, 355933, 356091, 356785, 356972, 358196, 358546, 358645, 358654, 358714, 358894, 359085, 359206, 359320, 359436, 359625, 359732, 359935, 360111, 360151, 360234, 360241, 361371, 362042, 362059, 362111, 362112, 362124, 362150, 362224, 362278, 362326, 362424, 362441, 362555, 362632, 362719, 362740, 362955, 363549, 363569, 363596, 364009, 364155, 364986, 365086, 365489, 365615, 366332, 366345, 366852, 366897, 367577, 367626, 367814, 367823, 367905, 368170, 368806, 368832, 370401, 370501, 370707, 370801, 370820, 370831, 370852, 370920, 370938, 371026, 371398, 371418, 371604, 371702, 371930, 371987, 372033, 372075, 372087, 372639, 373541, 374014, 374215, 374262, 374316, 374398, 374535, 374553, 374651, 374673, 374734, 374790, 374934, 374940, 375014, 375544, 375831, 375881, 375940, 377218, 377245, 378118, 378259, 378856, 379041, 379282, 380081, 380198, 380274, 380451, 380512, 380595, 380626, 380632, 380639, 380665, 380755, 380775, 380885, 383551, 383735, 383775, 384247, 384262, 384401, 384489, 384511, 384633, 385688, 385709, 385714, 385730, 385809, 385841, 385893, 385913, 385949, 385966, 386017, 386088, 386183, 386341, 386493, 386500, 386544, 386584, 386741, 387198, 387893, 388353, 388365, 388375, 388431, 388439, 388642, 388708, 388718, 388775, 388822, 389426, 389813, 389822, 389993, 390108, 390900, 391462, 391557, 392083, 392135, 392266, 392787, 393152, 393169, 393322, 393701, 394898, 394921, 394957, 395232, 395314, 396005, 396009, 396143, 396191, 396621, 397760, 398117, 398170, 398212, 398378, 399648, 399760, 399768, 399770, 399798, 400022, 400100, 400861, 400866, 400900, 401232, 401348, 401415, 401945, 402430, 402517, 402936, 403058, 403088, 405288, 405333, 405336, 405352, 405379, 405429, 405600, 406253, 406293, 406351, 406361, 406433, 406463, 406760, 406791, 406830, 406850, 407255, 407402, 407983, 408101, 408310, 408452, 409611, 409716, 409727, 409765, 409807, 409846, 409852, 409969, 410026, 410417, 410692, 411447, 411478, 411500, 411515, 411517, 411572, 411579, 411592, 411631, 412380, 412435, 412763, 412839, 412864, 413095, 413311, 413597, 413825, 414290, 414328, 414746, 414749, 414896, 415291, 417039, 417699, 417878, 417954, 418064, 418983, 419554, 419788, 419796, 419952, 419954, 420541, 420617, 420623, 420646, 420774, 420867, 420895, 421797, 421801, 421851, 423247, 423794, 423840, 423865, 424443, 424586, 424743, 424760, 424775, 424920, 425132, 425226, 425988, 426505, 427217, 427363, 427725, 427756, 427799, 427902, 427909, 427941, 427980, 428001, 428617, 428896, 428924, 429890, 430145, 430403, 431091, 431203, 431311, 431785, 431839, 431967, 432833, 433106, 433188, 433475, 433526, 434039, 434626, 434666, 434737, 434761, 434888, 434890, 435729, 436700, 436716, 436736, 436759, 436807, 436954, 437026, 438188, 438431, 438492, 438715, 439086, 439166, 439255, 439298, 439302, 439541, 439617, 439814, 439897, 439974, 440016, 440204, 442019, 442022, 442245, 442265, 442425, 442678, 442924, 443000, 443010, 443170, 443239, 443310, 443403, 443423, 443466, 443687, 443935, 443936, 443980, 444008, 444909, 445883, 445915, 445984, 446262, 446303, 446320, 446462, 446474, 446483, 446663, 446702, 446706, 446835, 447186, 447408, 448158, 448206, 448258, 448320, 448629, 448653, 449002, 449760, 450350, 450410, 450463, 450474, 450617, 450820, 451004, 451035, 451078, 451099, 451228, 451647, 452120, 452281, 452296, 452743, 452902, 453023, 453059, 453163, 453186, 453359, 453451, 453479, 453538, 453738, 453820, 453879, 454218, 454250, 454870, 454891, 455237, 455409, 455420, 456786, 456935, 457128, 457287, 457482, 457970, 458225, 458460, 458518, 459538, 459554, 459560, 460223, 460300, 460364, 460371, 460404, 460562, 460576, 460698, 460733, 460755, 460815, 460846, 461439, 461475, 461893, 461988, 462167, 462311, 462348, 462697, 462699, 462793, 462879, 463029, 463302, 463419, 464471, 464731, 464831, 464852, 464874, 464889, 464941, 465238, 465313, 465627, 465706, 466560, 466565, 466799, 466841, 466946, 468062, 468266, 468273, 468372, 468388, 468832, 468914, 469657, 469899, 469982, 470311, 470724, 470789, 470944, 470984, 471693, 472137, 472488, 473087, 473998, 474057, 474184, 474259, 474315, 474450, 474451, 474535, 474564, 474841, 475794, 475825, 475843, 476049, 476163, 476217, 476422, 476534, 476676, 477101, 477351, 477399, 477750, 477965, 478135, 478150, 478167, 478968, 479081, 479105, 479565, 479883, 479966, 480007, 480033, 480263, 480319, 480389, 480973, 481068, 481122, 481211, 481314, 481334, 481714, 481725, 481846, 482466, 482560, 482986, 483054, 483215, 483333, 483702, 484212, 484562, 485240, 485398, 486420, 486749, 486784, 486948, 487046, 487065, 487258, 487441, 487485, 487682, 488601, 488808, 489173, 489258, 489304, 489317, 489485, 490677, 490728, 490850, 490860, 490896, 491375, 491646, 491735, 491780, 492454, 492539, 493033, 493177, 493311, 493388, 493490, 493494, 493673, 493947, 495004, 495228, 495273, 495471, 495616, 496096, 496472, 496704, 497508, 497699, 498636, 499210, 499393, 500431, 500508, 500832, 502346, 502415, 502430, 503139, 503218, 503263, 503383, 503427, 503789, 503877, 503898, 503996, 504103, 504367, 504500, 504645, 506092, 506295, 506648, 506807, 507343, 507649, 507747, 507936, 508026, 508054, 508085, 508126, 509193, 510214, 510319, 510341, 510376, 510477, 510863, 510949, 511093, 511378, 511477, 511921, 512166, 512266, 512401, 512527, 513234, 513335, 513672, 514564, 514833, 514948, 514953, 515269, 515590, 515631, 515787, 515975, 516160, 516309, 516399, 516463, 516569, 516617, 516637, 516689, 516768, 516788, 516882, 516964, 517751, 519324, 519461, 519484, 519515, 519520, 519631, 519645, 519675, 519914, 519929, 520030, 520064, 520280, 520290, 520400, 520527, 520922, 521505, 521687, 522222, 523194, 523359, 523431, 523624, 524062, 524066, 524081, 524351, 524428, 524483, 524495, 524503, 524567, 525319, 525364, 525413, 525425, 525711, 526246, 526555, 527234, 527259, 527685, 527766, 527819, 527947, 527953, 528122, 528372, 528999, 529088, 529999, 531151, 531315, 531380, 531520, 531759, 531976, 532588, 532816, 532935, 533042, 533171, 533332, 533379, 533426, 533464, 533767, 533831, 533858, 533872, 533881, 533902, 533922, 534531, 534690, 534718, 534793, 534807, 534846, 535328, 535531, 535572, 535720, 535972, 536378, 536396, 536435, 536449, 536798, 536971, 537174, 538121, 538281, 538305, 538426, 538695, 538729, 540248, 540430, 540634, 540708, 540876, 540947, 541487, 541936, 542766, 542770, 542915, 543263, 543318, 543473, 544249, 544449, 544991, 545421, 545457, 545671, 545885, 547946, 548007, 549274, 549382, 549606, 549701, 549755, 550143, 550536, 550571, 550702, 551111, 551142, 551173, 551406, 551589, 552421, 552472, 552612, 552844, 552857, 552909, 553035, 553536, 553857, 553905, 554044, 554159, 554276, 554345, 554767, 555750, 555796, 555799, 555871, 555929, 555982, 556006, 556133, 556203, 556265, 556310, 556510, 556526, 556616, 557112, 557159, 558010, 559254, 559274, 559779, 560123, 561365, 561528, 561601, 561762, 561853, 561891, 564303, 564557, 564699, 564816, 564935, 564938, 564961, 565075, 565095, 566167, 566185, 566411, 566418, 566437, 566655, 566860, 568616, 568671, 568724, 568751, 568780, 568852, 569109, 569245, 569522, 569525, 569614, 569714, 569877, 569903, 570123, 570153, 570231, 570302, 570338, 570376, 570452, 570471, 570535, 570560, 570578, 571265, 572647, 573026, 573050, 573194, 573231, 573325, 573384, 573439, 573539, 573584, 573621, 573655, 573692, 573882, 574019, 574787, 574809, 574824, 574868, 574972, 575173, 575202, 575217, 576660, 576678, 576740, 576912, 576979, 577132, 577280, 577358, 577403, 577427, 577749, 577868, 578152, 578211, 578231, 579676, 580257, 580590, 580867, 580887, 580896, 580905, 581318, 581343, 581405, 581448, 581590, 581714, 581722, 581730, 581949, 581967, 582095, 582122, 582284, 582287, 582550, 582575, 582725, 583123, 583414, 583944, 584134, 584549, 585031, 585306, 585344, 585372, 585406, 585725, 585860, 585969, 586037, 586042, 586087, 586116, 586193, 586262, 586284, 586352, 586363, 586422, 586436, 588319, 589351, 589737, 589774, 589870, 589943, 589966, 589967, 590122, 590162, 590231, 590991, 591144, 591273, 591507, 591632, 591951, 592064, 592824, 592933, 592934, 593026, 593730, 593808, 594208, 594230, 594268, 594378, 594923, 595110, 595279, 595399, 595762, 595810, 596065, 596339, 596367, 596465, 596549, 597012, 597590, 597675, 597788, 597819, 598640, 598702, 599976, 600022, 600525, 600607, 600651, 601436, 601497, 601674, 601804, 601974, 602279, 602326, 603727, 604252, 605215, 605417, 605441, 605498, 605526, 605533, 605682, 605726, 605828, 605859, 605891, 606109, 606524, 606636, 606642, 606902, 606997, 607130, 607377, 607587, 608028, 608057, 608453, 608525, 608530, 608542, 609293, 609501, 609963, 610001, 610026, 610199, 610229, 610458, 610603, 610732, 610743, 610818, 610870, 611295, 611433, 612058, 612178, 612253, 612283, 612486, 612592, 612689, 612722, 612753, 613699, 614542, 614713, 615105, 615168, 615334, 615377, 618148, 618182, 618190, 618216, 618267, 618276, 618292, 618535, 618835, 618878, 618909, 618966, 619033, 619087, 619162, 619197, 619434, 619448, 619716, 619856, 619912, 620024, 620198, 620234, 620376, 620484, 620534, 620546, 621633, 622710, 622743, 622763, 623159, 623242, 623243, 623451, 623990, 624116, 624176, 624217, 625340, 625465, 625513, 625611, 625640, 625687, 625928, 625947, 626058, 626115, 626132, 626139, 626187, 626196, 626328, 626707, 626889, 626910, 626924, 626935, 627172, 627267, 627315, 627478, 627507, 627730, 627742, 627982, 628049, 628119, 628843, 629411, 629712, 629758, 629798, 629804, 629910, 629955, 630045, 630464, 630605, 630808, 631088, 631099, 631484, 631499, 631550, 631651, 631825, 631919, 631994, 632148, 632383, 632399, 632570, 632606, 633585, 633656, 634664, 634693, 634727, 634777, 634829, 635640, 635841, 635915, 636046, 636266, 637672, 637960, 638038, 638115, 638142, 638171, 638216, 638222, 638701, 638828, 638881, 639166, 639292, 639320, 640302, 640307, 640415, 640464, 640502, 640522, 640613, 640651, 641727, 641906, 641911, 641931, 642005, 642058, 642103, 642123, 642933, 643050, 643422, 643694, 643775, 644089, 644267, 644342, 644715, 645533, 645678, 645826, 645836, 646742, 646750, 646779, 646794, 647403, 647413, 647425, 647427, 647453, 647499, 647779, 647815, 648003, 648115, 648160, 648188, 648196, 648553, 648576, 648692, 648700, 648732, 648814, 649320, 649428, 649471, 649773, 649962, 650898, 651032, 651055, 651283, 651350, 651399, 651419, 651462, 651682, 651803, 652512, 653154, 653469, 653596, 653634, 653674, 653730, 653738, 653882, 654592, 654664, 654715, 654752, 654802, 654858, 654906, 655289, 655328, 655657, 655751, 655803, 656072, 656325, 656373, 656431, 656564, 657037, 657112, 657263, 657318, 657503, 657573, 657664, 657685, 657735, 658506, 658614, 658644, 658654, 658868, 659148, 659529, 7074, 9033
Task 4.2 results end

Task 4.3 code begin
# mapper1.py
#!/usr/bin/python
import re
import sys

# post_id   1   1
# post_id   2   user_id

# -> user_id    post_id

# user_id   ->  235 ->  posts

for line in sys.stdin:
    line = line.strip()
    # extract and separate the request
    line = line[4:][:-2].strip()
    # get the raw data as a list of strings
    data_raw = re.findall(r'\S+"\S+"', line)
    # get the attribute and values from the raw string

    data = dict()
    for pair in data_raw:
        pair = pair.split("=")
        if len(pair) > 1:
            value = pair[1][1:][:-1]
            data[pair[0]] = value

    # get the questions
    if data.get("PostTypeId") == '1':
        post_id = data.get("AcceptedAnswerId")
        if post_id:
            print("{0}\t1\t1".format(post_id))

    # get the answers
    if data.get("PostTypeId") == '2':
        post_id = data.get("Id")
        user_id = data.get("OwnerUserId")
        if post_id:
            print("{0}\t2\t{1}".format(post_id, user_id))

# reducer1.py
#!/usr/bin/python

import sys

prev_post = ''
post_id = ''
user_id = ''

for line in sys.stdin:
    line = line.strip()
    post_id, post_type, user_id = line.split("\t", 3)

    if prev_post == post_id:
        print("{0}\t{1}\t1".format(user_id, post_id))

    prev_post = post_id

# reducer2.py
#!/usr/bin/python

import sys

prev_user = ''
prev_post = ''
post_count = 0
current_post_list = ''

user_id = ''
post_id = ''

max_post_count = 0
max_user = ''
max_post_list = ''

for line in sys.stdin:
    line = line.strip()
    user_id, post_id, _ = line.split("\t", 3)

    if prev_user != user_id:
        if prev_user:
            if post_count > max_post_count:
                max_post_count = post_count
                max_user = prev_user
                max_post_list = current_post_list
        post_count = 0
        prev_post = ''
        current_post_list = ''

    if prev_post != post_id:
        # append the previous post id to the list for this user
        if post_count != 0:
            current_post_list += ', '
        current_post_list += post_id
        post_count += 1

    prev_user = user_id
    prev_post = post_id

if prev_user == user_id:
    if post_count > max_post_count:
        max_post_count = post_count
        max_user = user_id
        max_post_list = current_post_list

print("{0}\t{1}\t{2}".format(max_post_count, max_user, max_post_list))

# reducer3.py
#!/usr/bin/python

import sys

num = 0

for line in sys.stdin:
    line = line.strip()
    count, user_id, posts = line.split("\t", 3)

    if num < 1:
        print("{0}\t->\t{1}\t{2}".format(user_id, count, posts))
        num += 1

hadoop jar /opt/hadoop/hadoop-2.7.1/share/hadoop/tools/lib/hadoop-streaming-2.7.1.jar  -D stream.num.map.output.key.fields=2  -D num.key.fields.for.partition=1  -D mapreduce.partition.keypartitioner.options="-k1,1"  -D mapreduce.partition.keycomparator.options="-k1,2"  -D mapred.output.key.comparator.class=org.apache.hadoop.mapred.lib.KeyFieldBasedComparator  -D mapred.text.key.comparator.options=-n  -input /data/assignments/ex2/task3/stackLarge.txt  -output /user/$USER/data/Assignment2/task8/output/job1/  -mapper mapper1.py  -reducer reducer1.py  -partitioner org.apache.hadoop.mapred.lib.KeyFieldBasedPartitioner  -file Documents/EXC/Assignment2/task8/input/mapper1.py  -file Documents/EXC/Assignment2/task8/input/reducer1.py  -jobconf mapred.job.name="Sam's stack overflow most accepted part 1" ;
hadoop jar /opt/hadoop/hadoop-2.7.1/share/hadoop/tools/lib/hadoop-streaming-2.7.1.jar  -D stream.num.map.output.key.fields=2  -D num.key.fields.for.partition=1  -D mapreduce.partition.keypartitioner.options="-k1,1"  -D mapreduce.partition.keycomparator.options="-k1,2"  -D mapred.output.key.comparator.class=org.apache.hadoop.mapred.lib.KeyFieldBasedComparator  -D mapred.text.key.comparator.options=-nr  -input /user/$USER/data/Assignment2/task8/output/job1/  -output /user/$USER/data/Assignment2/task8/output/job2/  -mapper cat  -reducer reducer2.py  -partitioner org.apache.hadoop.mapred.lib.KeyFieldBasedPartitioner  -file Documents/EXC/Assignment2/task8/input/reducer2.py  -jobconf mapred.job.name="Sam's stack overflow most accepted part 2" ;
hadoop jar /opt/hadoop/hadoop-2.7.1/share/hadoop/tools/lib/hadoop-streaming-2.7.1.jar  -D mapred.output.key.comparator.class=org.apache.hadoop.mapred.lib.KeyFieldBasedComparator  -D mapred.text.key.comparator.options=-nr  -D mapreduce.job.reduces=1  -input /user/$USER/data/Assignment2/task8/output/job2/  -output /user/$USER/data/Assignment2/task8/output/job3/  -mapper cat  -reducer reducer3.py  -file Documents/EXC/Assignment2/task8/input/reducer3.py  -jobconf mapred.job.name="Sam's stack overflow most accepted part 3" ;
Task 4.3 code end

Task 4.3 results begin
22656	->	1097	139841, 141468, 141528, 144069, 144085, 144189, 145516, 146167, 146227, 151950, 153744, 154524, 154710, 156838, 157213, 161484, 161565, 161787, 161965, 162323, 162750, 162774, 163261, 164270, 164398, 164455, 164650, 168414, 169872, 173333, 176274, 177561, 177840, 178197, 178990, 181462, 182515, 182620, 182696, 182767, 183260, 183696, 186003, 186155, 186550, 186613, 186667, 186685, 187048, 187432, 187793, 188017, 188130, 188148, 188993, 190254, 190308, 191170, 191189, 192615, 193740, 193879, 194307, 194514, 195615, 196117, 197181, 197191, 197247, 197299, 198136, 198576, 200142, 200165, 200784, 201266, 201449, 201630, 204009, 204354, 204508, 204581, 204744, 205117, 206227, 207711, 208136, 208150, 208202, 208221, 208683, 208756, 209002, 209319, 209448, 210139, 211161, 212094, 212283, 212512, 213403, 213450, 213582, 213651, 213710, 214693, 214712, 215462, 217691, 217993, 218485, 219001, 219654, 221209, 221322, 221383, 221695, 221852, 221941, 222079, 223709, 225077, 225255, 225967, 225994, 227525, 227569, 227598, 227833, 229006, 229023, 229134, 229558, 229670, 229849, 230063, 231536, 232616, 232621, 232803, 233149, 233236, 233303, 233492, 233943, 234016, 234395, 234751, 234999, 235067, 235459, 236705, 237685, 238669, 239252, 239316, 239663, 239903, 240665, 241143, 241291, 241380, 241670, 242586, 242763, 242910, 243054, 244153, 244805, 244838, 245006, 245077, 246101, 246114, 246394, 246529, 247623, 251904, 251974, 252790, 252803, 252831, 253473, 253619, 253795, 253962, 254010, 254053, 254109, 254333, 254908, 255072, 255113, 255638, 255656, 255834, 256079, 256085, 256636, 257059, 257252, 257540, 258219, 258499, 258585, 258999, 259695, 259732, 259985, 261067, 261073, 261146, 261813, 262101, 262631, 263080, 263177, 263257, 263416, 263633, 264478, 264643, 264740, 265031, 265130, 265214, 265599, 265885, 265994, 266282, 266301, 266319, 266764, 266846, 267089, 267836, 268536, 268600, 268662, 268699, 269070, 269320, 269325, 269625, 270106, 270173, 270641, 271415, 271447, 271529, 271575, 271645, 271928, 272164, 272393, 272830, 272960, 273318, 274615, 275129, 276255, 276455, 277266, 277767, 277790, 277873, 278521, 279395, 280160, 280167, 280236, 280293, 280446, 281049, 281285, 281358, 282113, 282548, 283269, 283491, 283676, 284905, 285101, 285184, 285368, 285809, 285849, 286445, 286520, 286613, 286645, 287190, 287217, 287627, 288090, 288802, 288827, 289363, 289520, 290063, 290216, 290340, 290656, 291114, 291357, 292747, 292994, 293143, 293268, 293269, 293891, 293897, 293907, 293908, 293919, 294145, 294259, 295040, 295145, 295160, 295248, 295597, 295627, 295748, 295754, 296780, 296794, 296985, 298287, 298313, 298332, 299177, 299526, 299979, 300008, 300074, 300409, 300418, 300493, 300511, 301977, 302038, 302129, 302172, 302317, 302378, 302492, 304484, 304541, 304664, 304821, 305163, 305168, 305257, 305362, 305412, 305764, 306131, 308040, 308689, 308962, 309005, 309076, 309528, 309636, 309766, 309791, 309944, 311717, 312275, 312277, 313069, 313115, 313131, 313590, 314010, 314130, 314138, 314831, 315186, 315369, 316578, 316659, 316925, 317034, 317097, 317608, 318698, 319911, 320834, 321104, 323220, 323261, 324078, 324090, 324356, 324616, 324661, 325161, 325308, 325542, 325739, 326104, 326667, 327312, 327462, 329106, 329141, 329209, 330177, 330363, 330533, 330640, 333217, 333254, 333404, 333671, 333840, 334595, 334815, 336396, 336433, 336797, 336838, 337143, 337171, 337366, 338042, 338761, 339798, 339894, 339937, 340028, 340174, 340526, 340554, 340566, 341062, 341865, 341977, 342016, 342099, 342272, 343380, 343507, 343552, 343691, 343862, 343886, 344055, 344340, 344377, 344400, 344555, 344635, 346085, 346215, 346346, 346735, 346772, 348045, 348977, 349259, 349267, 349384, 349428, 349736, 350178, 351032, 352133, 352210, 352421, 352441, 352631, 353065, 353154, 353435, 355300, 355644, 355806, 356118, 356977, 358653, 358716, 359215, 359339, 359449, 359634, 360180, 360255, 361397, 362119, 362332, 362443, 362453, 362640, 362732, 362804, 363582, 363627, 364024, 365017, 366339, 366352, 366905, 367829, 367923, 370580, 370742, 370811, 370828, 370842, 370936, 370942, 371508, 371525, 371736, 371946, 372061, 372648, 373804, 374426, 374750, 374801, 375074, 375803, 375837, 375926, 377259, 377263, 378140, 378266, 379058, 380786, 383782, 384335, 384416, 384529, 385727, 385814, 385851, 385972, 386099, 386267, 386514, 388369, 388378, 388448, 388742, 388793, 388834, 389871, 390072, 390158, 391576, 392096, 392800, 393173, 393179, 394948, 394960, 395306, 395320, 396011, 396026, 396159, 396629, 398155, 398217, 399772, 399774, 399811, 400039, 400888, 400908, 402944, 403070, 405733, 406359, 406841, 407417, 409722, 409876, 409982, 410684, 411523, 411586, 411597, 412774, 413106, 413329, 413864, 414315, 414764, 417485, 419807, 419975, 420633, 420894, 421868, 423806, 423875, 424453, 424612, 425245, 426008, 427370, 427737, 427919, 427993, 428624, 428956, 430160, 430709, 431319, 433116, 434053, 434697, 434963, 435045, 435797, 436738, 436764, 436773, 436817, 436957, 438739, 439232, 439311, 439317, 439584, 439633, 439925, 440047, 442282, 442480, 443203, 443258, 443433, 443956, 444000, 445886, 446476, 446499, 446671, 446722, 447429, 448272, 448333, 448635, 448661, 449035, 450482, 450856, 451696, 452945, 453071, 453188, 453370, 453557, 453920, 454299, 454312, 454895, 455417, 456811, 457084, 457146, 457999, 458417, 459566, 460350, 460390, 460746, 460824, 460858, 461465, 462023, 462235, 462725, 462733, 463078, 464851, 464861, 464886, 464971, 465281, 465648, 465731, 466574, 466815, 466974, 468392, 468873, 468934, 469978, 470976, 472153, 472506, 473122, 474198, 474288, 474468, 474480, 474585, 474859, 475828, 475830, 476554, 477333, 477406, 478177, 479095, 479983, 480039, 480313, 480357, 481079, 481237, 481350, 481724, 481853, 483001, 483067, 483231, 485296, 486781, 487097, 487695, 488816, 489386, 489421, 489548, 490739, 490863, 490909, 491591, 493055, 493201, 493387, 493420, 493501, 493517, 493735, 493956, 495012, 495281, 495622, 496167, 496620, 498644, 499218, 499407, 503387, 503434, 503839, 503928, 504683, 506184, 506310, 507904, 507958, 508094, 508157, 509290, 510358, 510388, 510953, 511223, 511413, 511489, 512335, 512471, 512550, 513346, 513684, 514768, 514840, 514964, 516342, 516581, 516636, 516897, 516999, 519506, 519530, 519537, 519682, 520046, 520413, 520568, 521144, 523368, 523449, 524106, 524436, 524514, 524578, 525420, 527778, 527837, 527965, 528041, 528172, 528411, 530014, 531321, 531338, 531772, 531986, 532607, 532841, 532952, 533066, 533289, 533339, 533420, 533448, 533473, 533836, 533878, 533888, 533907, 534570, 534802, 534826, 534850, 535651, 535731, 535782, 536451, 536461, 536996, 537190, 538227, 538295, 538508, 538714, 538751, 540530, 540649, 540887, 541506, 542791, 542852, 542933, 543329, 543500, 545064, 545437, 545483, 547968, 549618, 549714, 549762, 550586, 551600, 552469, 552478, 552850, 552887, 552915, 554308, 555818, 555955, 555979, 556009, 556039, 556522, 556622, 557133, 557186, 560131, 564845, 564949, 564973, 565054, 566180, 566659, 567223, 568655, 568789, 569253, 569541, 569554, 569627, 569920, 570170, 570347, 570365, 570493, 570588, 570606, 573217, 573445, 573568, 573628, 574659, 574814, 576762, 576795, 577300, 577365, 577430, 577451, 578222, 578242, 579721, 580702, 580794, 580910, 580928, 581355, 581432, 581464, 582137, 582567, 583440, 583958, 585313, 585373, 585415, 585897, 586105, 586210, 586280, 586397, 586440, 588330, 589778, 589805, 589940, 589950, 590137, 590166, 590237, 591165, 591979, 592078, 593799, 594276, 594973, 595298, 595415, 596396, 597045, 597660, 597686, 598063, 598738, 600016, 600571, 600667, 601485, 601813, 602342, 604293, 605338, 605544, 605554, 605776, 605787, 605832, 605866, 606549, 606641, 606913, 607147, 608043, 608470, 609529, 609981, 610674, 610767, 610837, 611315, 612067, 612193, 612267, 612700, 612772, 613738, 614587, 614738, 615115, 615389, 618161, 618192, 618202, 618226, 618596, 618886, 618927, 619013, 619108, 619210, 619461, 619859, 620225, 620246, 620396, 620519, 620544, 622749, 623211, 624151, 624192, 624223, 625538, 626121, 626150, 626207, 626367, 626936, 626964, 627213, 627514, 627757, 627767, 628072, 629428, 629833, 630635, 630826, 631552, 631560, 631672, 631834, 631934, 632003, 632162, 633602, 634867, 635664, 635934, 636062, 638049, 638121, 638233, 638848, 639196, 639328, 640323, 640350, 640426, 640517, 640537, 640692, 641916, 641944, 642030, 642116, 642970, 643110, 644095, 644287, 644366, 644757, 645833, 646780, 646805, 647432, 647502, 647795, 648106, 648122, 648169, 648192, 648818, 649611, 649786, 650921, 651062, 651338, 651428, 651824, 652580, 653183, 653907, 654684, 654735, 654756, 654868, 655311, 655668, 656114, 656336, 656387, 657156, 657175, 657214, 657585, 657696, 657703, 658669, 658713, 659177
Task 4.3 results end